# # # # # Directories # # # # # # # # # #
#
ROOT_DIR := $(realpath ${CURDIR}/..)
# directory for the building
BUILD_DIR := @BUILD_DIR@
# directory for the executable
BIN_DIR := ${ROOT_DIR}/@BIN_DIR@

TARGET := main

SRC_DIR := ${ROOT_DIR}/@SRC_DIR@
BUILD_SRC_DIR := @SRC_DIR@

# external libraries
EXT_DIR := ${ROOT_DIR}/@EXTERN_DIR@

# # # # # Settings # # # # # # # # # # # #
#
DEBUGMODE := @DEBUGMODE@
VERBOSE := @VERBOSE@
USEKOKKOS := @USEKOKKOS@

DEFINITIONS :=

ifeq ($(strip ${VERBOSE}), y)
	HIDE =
else
	HIDE = @
endif

# 3-rd party library configurations
ifeq ($(strip ${USEKOKKOS}), y)
KOKKOS_PATH := ${EXT_DIR}/kokkos
KOKKOS_BUILD_DIR = ${BUILD_DIR}/kokkos/
KOKKOS_ARCH := @KOKKOS_ARCH@
KOKKOS_DEVICES := @KOKKOS_DEVICES@
KOKKOS_OPTIONS := @KOKKOS_OPTIONS@
KOKKOS_CUDA_OPTIONS := @KOKKOS_CUDA_OPTIONS@
KOKKOS_CXX_STANDARD := @CXXSTANDARD@
PREPFLAGS := ${PREPFLAGS} @KOKKOS_LOOP_LAYOUT@ @KOKKOS_VECTOR_LENGTH@
NVCC_WRAPPER_DEFAULT_COMPILER := @NVCC_WRAPPER_DEFAULT_COMPILER@
DEFINITIONS := $(DEFINITIONS) -DKOKKOS
endif

# # # # # Compiler and flags # # # # # # #
#
CXX := @COMPILER@
LINK := ${CXX}
CXXSTANDARD := -std=@CXXSTANDARD@
ifeq ($(strip ${DEBUGMODE}), n)
	# linker configuration flags (e.g. optimization level)
	CONFFLAGS := @RELEASE_CONF_FLAGS@
	PREPFLAGS := @RELEASE_PP_FLAGS@
else
	CONFFLAGS := @DEBUG_CONF_FLAGS@
	PREPFLAGS := @DEBUG_PP_FLAGS@
endif

# warning flags
WARNFLAGS := @WARNING_FLAGS@

# custom preprocessor flags
PREPFLAGS := $(PREPFLAGS)

CPPFLAGS = $(WARNFLAGS) $(PREPFLAGS)
CXXFLAGS := $(CXXFLAGS) $(CONFFLAGS)

# # # # # File collection # # # # # # # # # # #
#
# Main core
SRCS := $(shell find ${SRC_DIR} -name *.cpp -or -name *.c)
OBJS := $(subst ${SRC_DIR},${BUILD_SRC_DIR},$(SRCS:%=%.o))
DEPS := $(OBJS:.o=.d)

INC_DIRS := $(shell find ${SRC_DIR} -type d) ${EXT_DIR}
INCFLAGS := $(addprefix -I,${INC_DIRS})

ALL_OBJS := $(OBJS)

# # # # # Targets # # # # # # # # # # # # # #
#
default: help

help:
	@echo "Current configurations:"
	@echo
	@echo "usage: \`make all\`"
	@echo
	@echo "cleanup: \`make [clean|cleanlib]\`"
	@echo

ifeq ($(strip ${USEKOKKOS}), y)
# using `Kokkos`
include ${KOKKOS_PATH}/Makefile.kokkos
OBJS := $(OBJS) $(KOKKOS_LINK_DEPENDS)
CPPFLAGS := $(CPPFLAGS) $(KOKKOS_CPPFLAGS)
CXXFLAGS := $(CXXFLAGS) $(KOKKOS_CXXFLAGS)
LDFLAGS := $(LDFLAGS) $(KOKKOS_LDFLAGS) $(KOKKOS_LIBS)
endif

# linking the main app
all : ${BIN_DIR}/${TARGET}
	@echo [M]aking $@

${BIN_DIR}/${TARGET} : $(OBJS)
	@echo [L]inking $(notdir $@) from $<
	$(HIDE)${LINK} $(OBJS) -o $@ $(LDFLAGS)

# generate compilation rules for all `.o` files
define generateRules
$(1): $(2)
	@echo [C]ompiling $(subst ${ROOT_DIR}/,,$(2))
	$(HIDE)mkdir -p ${BIN_DIR}
	$(HIDE)mkdir -p $(dir $(1))
	$(HIDE)${CXX} ${CXXSTANDARD} $(INCFLAGS) $(DEFINITIONS) $(CPPFLAGS) $(CXXFLAGS) -c $(2) -o $(1)
endef
$(foreach obj, $(ALL_OBJS), $(eval $(call generateRules, ${obj}, ${ROOT_DIR}/$(subst .o,,$(obj)))))

.PHONY: all help clean cleanlib

clean:
	rm -rf ${BUILD_SRC_DIR}
	rm -rf ${BIN_DIR}

ifeq ($(strip $(USEKOKKOS)), y)
cleanlib: kokkos-clean
endif

-include $(DEPS)
